To use this engine, you would typically:
# Example usage
from src.engine.vector_engine import VectorEngine
from src.story.story_parser import StoryParser

# Initialize
parser = StoryParser("data/story.txt")
segments = parser.parse()
engine = VectorEngine()

# Embed all segments
engine.embed_segments(segments)

# When player makes a response
response = "Player's text input here"
response_embedding = engine.embed_response(response)

# Get nearest segments
nearest = engine.find_nearest_segments(response_embedding)

# Check stability
stability = engine.calculate_stability(response_embedding)

# Check for triggered memories
triggered = engine.check_memory_trigger(response_embedding)

# Update position
engine.update_position(response_embedding)

Response handler

# Example usage
from src.engine.response_handler import ResponseHandler
from src.engine.vector_engine import VectorEngine
from src.engine.state_machine import StateMachine
from src.story.story_parser import StoryParser

# Initialize components
parser = StoryParser("data/story.txt")
segments = parser.parse()
vector_engine = VectorEngine()
vector_engine.embed_segments(segments)
state_machine = StateMachine(segments)
response_handler = ResponseHandler(vector_engine, state_machine)

# Process a player response
response = response_handler.process_response("Player input here")

# Check response
print(f"State: {response.state}")
print(f"Stability: {response.stability:.2f}")
print(f"Message: {response.message}")
if response.discovered_memory:
    print(f"New memory discovered: {response.discovered_memory}")
if response.can_progress:
    print("Ready to advance to next paragraph!")